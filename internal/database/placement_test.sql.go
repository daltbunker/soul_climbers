// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: placement_test.sql

package database

import (
	"context"
	"time"
)

const createTestQuestion = `-- name: CreateTestQuestion :one
INSERT INTO test_question(question_text, input_type, answers, answer_points, points, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING test_question_id, question_text, input_type, answers, answer_points, points, created_at, updated_at
`

type CreateTestQuestionParams struct {
	QuestionText string
	InputType    string
	Answers      string
	AnswerPoints string
	Points       int32
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) CreateTestQuestion(ctx context.Context, arg CreateTestQuestionParams) (TestQuestion, error) {
	row := q.db.QueryRowContext(ctx, createTestQuestion,
		arg.QuestionText,
		arg.InputType,
		arg.Answers,
		arg.AnswerPoints,
		arg.Points,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i TestQuestion
	err := row.Scan(
		&i.TestQuestionID,
		&i.QuestionText,
		&i.InputType,
		&i.Answers,
		&i.AnswerPoints,
		&i.Points,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPlacementTest = `-- name: GetPlacementTest :one
SELECT pt.score 
FROM placement_test pt
WHERE pt.user_id = $1
`

func (q *Queries) GetPlacementTest(ctx context.Context, userID int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getPlacementTest, userID)
	var score int32
	err := row.Scan(&score)
	return score, err
}

const getTestQuestions = `-- name: GetTestQuestions :many
SELECT tq.test_question_id, tq.question_text, tq.input_type, tq.answers, tq.answer_points, tq.points, tq.created_at
FROM test_question tq
`

type GetTestQuestionsRow struct {
	TestQuestionID int32
	QuestionText   string
	InputType      string
	Answers        string
	AnswerPoints   string
	Points         int32
	CreatedAt      time.Time
}

func (q *Queries) GetTestQuestions(ctx context.Context) ([]GetTestQuestionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTestQuestions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTestQuestionsRow
	for rows.Next() {
		var i GetTestQuestionsRow
		if err := rows.Scan(
			&i.TestQuestionID,
			&i.QuestionText,
			&i.InputType,
			&i.Answers,
			&i.AnswerPoints,
			&i.Points,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPlacmentTest = `-- name: InsertPlacmentTest :one
INSERT INTO placement_test(user_id, score, created_at, updated_at)
VALUES($1, $2, $3, $4)
RETURNING placement_test_id, user_id, score, created_at, updated_at
`

type InsertPlacmentTestParams struct {
	UserID    int32
	Score     int32
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) InsertPlacmentTest(ctx context.Context, arg InsertPlacmentTestParams) (PlacementTest, error) {
	row := q.db.QueryRowContext(ctx, insertPlacmentTest,
		arg.UserID,
		arg.Score,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i PlacementTest
	err := row.Scan(
		&i.PlacementTestID,
		&i.UserID,
		&i.Score,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
